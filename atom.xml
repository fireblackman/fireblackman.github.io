<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhangsir Blog</title>
  
  <subtitle>时间是最好的证明</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/fireblackman.github.io/"/>
  <updated>2019-03-16T10:44:40.214Z</updated>
  <id>https://github.com/fireblackman.github.io/</id>
  
  <author>
    <name>zhangsir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/16/factory-patterns-2019-3-16/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/16/factory-patterns-2019-3-16/</id>
    <published>2019-03-16T10:41:42.000Z</published>
    <updated>2019-03-16T10:44:40.214Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是工厂模式</p><p>2.工厂模式的分类</p><pre><code>1. 简单工厂模式2. 工厂方法模式3. 抽象工厂方法模式</code></pre><p>3.简单工厂模式的python实现</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"wang wang!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"miao miao!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义工厂</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForestFactory</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_sound</span><span class="params">(self, object_type)</span>:</span></span><br><span class="line"><span class="keyword">return</span> eval(object_type)().do_say()</span><br><span class="line"></span><br><span class="line"><span class="comment">## client code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">ff = ForestFactory()</span><br><span class="line">animal = input(<span class="string">"Which animal should make_sound Dog or Cat?"</span>)</span><br><span class="line">ff.make_sound(animal)</span><br></pre></td></tr></table></figure><p>#4.工厂方法模式的python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Section</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonSection</span><span class="params">(Section)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"personal section"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSection</span><span class="params">(Section)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Album section"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PatentSection</span><span class="params">(Section)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Patent section"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicationSection</span><span class="params">(Section)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Publication section"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个抽象类, 并提供一个工厂方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.sections = []</span><br><span class="line">self.createProfile()</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSections</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.sections</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addsections</span><span class="params">(self, section)</span>:</span></span><br><span class="line">self.sections.append(section)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhihu</span><span class="params">(Profile)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">self.addsections(PersonSection())</span><br><span class="line">self.addsections(AlbumSection())</span><br><span class="line">self.addsections(PublicationSection())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Csdn</span><span class="params">(Profile)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createProfile</span><span class="params">(self)</span>:</span></span><br><span class="line">self.addsections(PatentSection())</span><br><span class="line">self.addsections(PersonSection())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">profile_type = input(<span class="string">"which profile you'd like to create (Zhihu or Csdn)"</span>)</span><br><span class="line">profile = eval(profile_type)()</span><br><span class="line">print(<span class="string">"create profile.."</span>, type(profile).__name__)</span><br><span class="line">print(<span class="string">"Profile has sections --"</span>, profile.getSections())</span><br></pre></td></tr></table></figure><p>​<br>​    </p><p>#5.抽象工厂模式的python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndianPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> DeluxVeggiePizza()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChickenPizza()</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USPizzaFactory</span><span class="params">(PizzaFactory)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> MexicanVegPizza()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNonVegPizza</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HamPizza()</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonVegPizza</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeluxVeggiePizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChickenPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">    print(type(self).__name__, <span class="string">" is served with Chicken on "</span>, type(VegPizza).__name__)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MexicanVegPizza</span><span class="params">(VegPizza)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"Prepare "</span>, type(self).__name__)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamPizza</span><span class="params">(NonVegPizza)</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, VegPizza)</span>:</span></span><br><span class="line">    print(type(self).__name__, <span class="string">" is served with Ham on "</span>, type(VegPizza).__name__)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makePizzas</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> factory <span class="keyword">in</span> [IndianPizzaFactory(), USPizzaFactory()]:</span><br><span class="line">        self.factory = factory</span><br><span class="line">        self.NonVegPizza = self.factory.createNonVegPizza()</span><br><span class="line">        self.VegPizza = self.factory.createVegPizza()</span><br><span class="line">        self.VegPizza.prepare()</span><br><span class="line">        self.NonVegPizza.serve(self.VegPizza)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">pizza = PizzaStore()</span><br><span class="line">pizza.makePizzas()</span><br></pre></td></tr></table></figure><p>6.工厂方法与抽象工厂方法的比较<br> 工厂方法开发了一个创建对象的方法<br> 抽象工厂方法开放了一个或者多个方法创建一个系列的相关对象<br> 工厂方法使用继承和子类来决定要创建哪个对象<br> 抽象共产方法使用组合将创建对象的任务委托给其他类<br> 共产方法用于创建一个产品<br> 抽象工厂方法用于创建相关产品的系列</p><p>7.工厂模式的优缺点<br>‘’’<br>    优点: 1.松耦合, 即对象的创建可以独立于类的实现<br>          2.客户端无需了解创建对象的类的实现,但是依然可以创建对象<br>          3.可以在工厂中添加其他类来创建其他类型的对象<br>          4.工厂可以重用现有对象<br>‘’’</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.什么是工厂模式&lt;/p&gt;
&lt;p&gt;2.工厂模式的分类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 简单工厂模式
2. 工厂方法模式
3. 抽象工厂方法模式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.简单工厂模式的python实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://github.com/fireblackman.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/16/singleton-2019-3-16/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/16/singleton-2019-3-16/</id>
    <published>2019-03-16T08:15:42.000Z</published>
    <updated>2019-03-16T08:43:49.475Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是单例模式</p><ol><li><p>确保有且只有一个对象被创建</p></li><li><p>为对象提供一个访问点,以使程序可以全局访问该对象</p></li><li><p>控制共享资源的并行访问</p></li></ol><p>2.单例模式实例</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</span><br><span class="line">cls.instance = super(Singleton, cls).__new__(cls)</span><br><span class="line"><span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">s = Singleton()</span><br><span class="line">print(<span class="string">"Object created"</span>,s)</span><br><span class="line">s1 = Singleton()</span><br><span class="line">print(<span class="string">"Object created"</span>,s1)</span><br></pre></td></tr></table></figure><p>​        </p><p>3.单例设计模式中的懒汉式实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span>:</span></span><br><span class="line">__instance = <span class="keyword">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> Singleton1.__instance:</span><br><span class="line">print(<span class="string">"__init__ method called"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"Instance already created"</span>, self.getInstance())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInstance</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">cls.__instance = Singleton1()</span><br><span class="line"><span class="keyword">return</span> cls.__instance</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">s = Singleton1()</span><br><span class="line">print(<span class="string">"Object created"</span>, Singleton1.getInstance())</span><br><span class="line">s1 = Singleton1()</span><br></pre></td></tr></table></figure><p>4.Monostate(Borg) 单态模式</p><p>​    所有对象共享相同状态,改变一个实例的状态,另一个实例也会改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span>:</span></span><br><span class="line">__shared_state = &#123;<span class="string">"1"</span>:<span class="string">"2"</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.x = <span class="number">1</span></span><br><span class="line">self.__dict__ = self.__shared_state</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b = Borg()</span><br><span class="line">b1 = Borg()</span><br><span class="line">b.x = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Borg object b"</span>, b)</span><br><span class="line">print(<span class="string">"Borg object b1"</span>, b1)</span><br><span class="line">print(<span class="string">"Object state b"</span>, b.__dict__)</span><br><span class="line">print(<span class="string">"Object state b1"</span>, b1.__dict__)</span><br></pre></td></tr></table></figure><p>基于<strong>new</strong>方法本身实现Borg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BorgNew</span>:</span></span><br><span class="line">__shared_state = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">obj = super(BorgNew , cls).__new__(cls, *args, **kwargs)</span><br><span class="line">obj.__dict__ = cls.__shared_state</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">b = BorgNew()</span><br><span class="line">b1 = BorgNew()</span><br><span class="line">b.x = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Borg object b"</span>, b)</span><br><span class="line">print(<span class="string">"Borg object b1"</span>, b1)</span><br><span class="line">print(<span class="string">"Object state b"</span>, b.__dict__)</span><br><span class="line">print(<span class="string">"Object state b1"</span>, b1.__dict__)</span><br></pre></td></tr></table></figure><p>​<br>​    </p><p>5.单例和元类</p><p>元类: 元类是一个类的类,这意味着该类是它元类的一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInt</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">print(<span class="string">"******Here is MyInt******"</span>,args)</span><br><span class="line">print(<span class="string">"How do whatever you want with these objects..."</span>)</span><br><span class="line"><span class="keyword">return</span> type.__call__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int</span><span class="params">(metaclass=MyInt)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">self.x = x</span><br><span class="line">self.y = y</span><br><span class="line"></span><br><span class="line">i = int(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>基于元类的单例实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaSingleton</span><span class="params">(type)</span>:</span></span><br><span class="line">_instances = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">cls._instances[cls] = super(MetaSingleton, cls).__call__(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span><span class="params">(metaclass=MetaSingleton)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">logger1 = Logger()</span><br><span class="line">logger2 = Logger()</span><br><span class="line">print(logger1, logger2)</span><br></pre></td></tr></table></figure><p>​    </p><p>6.单例模式的应用        </p><p>A. 数据库的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaSingleton</span><span class="params">(type)</span>:</span></span><br><span class="line">_instances = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">cls._instances[cls] = super(MetaSingleton, cls).__call__(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span><span class="params">(metaclass=MetaSingleton)</span>:</span></span><br><span class="line">connection = <span class="keyword">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.connection <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">self.connection = sqlite3.connect(<span class="string">'db.sqlite3'</span>)</span><br><span class="line">self.cursorobj = self.connection.cursor()</span><br><span class="line"><span class="keyword">return</span> self.cursorobj</span><br><span class="line"></span><br><span class="line">db1 = Database().connect()</span><br><span class="line">db2 = Database().connect()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Database objcursor db1"</span>, db1)</span><br><span class="line">print(<span class="string">"Database objcursor db2"</span>, db2)</span><br></pre></td></tr></table></figure><p>单一的应用可以使用该方法,节约CPU,内存等资源</p><p>集群化应用, 就需要使用数据库连接池</p><p>B.监控服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthCheck</span>:</span></span><br><span class="line">_instances = <span class="keyword">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> HealthCheck._instances:</span><br><span class="line">HealthCheck._instances = super(HealthCheck, cls).__new__(cls, *args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> HealthCheck._instances</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self._servers = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addServer</span><span class="params">(self)</span>:</span></span><br><span class="line">self._servers.append(<span class="string">"server1"</span>)</span><br><span class="line">self._servers.append(<span class="string">"server2"</span>)</span><br><span class="line">self._servers.append(<span class="string">"server3"</span>)</span><br><span class="line">self._servers.append(<span class="string">"server4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeServer</span><span class="params">(self)</span>:</span></span><br><span class="line">self._servers.pop()</span><br><span class="line">self._servers.append(<span class="string">"server5"</span>)</span><br><span class="line"></span><br><span class="line">hc1 = HealthCheck()</span><br><span class="line">hc2 = HealthCheck()</span><br><span class="line">print(hc1,hc2)</span><br><span class="line"></span><br><span class="line">hc1.addServer()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">print(<span class="string">"checking "</span>, hc1._servers[i])</span><br><span class="line"></span><br><span class="line">hc2.changeServer()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">print(<span class="string">"checking "</span>, hc2._servers[i])</span><br></pre></td></tr></table></figure><p>7.单例模式的优缺点</p><p>优点: 1. 创建有且只有一个对象, 2.节省CPU,内存资源.</p><p>缺点: 1. 全局变量被误改, 但是别的对象还在引用 2.同一个对象,创建多个引用 3.可能影响其他类</p><p>备注: 以上运行环境位python3.7.0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.什么是单例模式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确保有且只有一个对象被创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为对象提供一个访问点,以使程序可以全局访问该对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制共享资源的并行访问&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.单例模式实例&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://github.com/fireblackman.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python实现8种常用排序算法</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/15/sort-2019-3-15/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/15/sort-2019-3-15/</id>
    <published>2019-03-15T07:15:42.000Z</published>
    <updated>2019-03-15T07:37:01.958Z</updated>
    
    <content type="html"><![CDATA[<p>L = [2,6,4,7,9,1,3,5,8]</p><p>1.插入排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(List)</span>:</span></span><br><span class="line">n = len(List)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):            <span class="comment"># 得到索引</span></span><br><span class="line">j = i<span class="number">-1</span>                     <span class="comment"># 获取当前元素之前的索引</span></span><br><span class="line">temp = List[i]</span><br><span class="line"><span class="keyword">while</span> j &gt;= <span class="number">0</span>:               <span class="comment"># 当索引大于等于时开始循环</span></span><br><span class="line"><span class="keyword">if</span> temp &lt; List[j]:      <span class="comment"># 当List[i]元素小于之前的元素</span></span><br><span class="line">List[j+<span class="number">1</span>] = List[j] <span class="comment"># 交换两个元素的位置</span></span><br><span class="line">List[j] = temp</span><br><span class="line">j -= <span class="number">1</span>                  <span class="comment"># 继续比较交换后的list[i]和再前一个元素的大小</span></span><br><span class="line"><span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(insert_sort(L))</span><br></pre></td></tr></table></figure><a id="more"></a><p>2.冒泡排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(List)</span>:</span></span><br><span class="line">n = len(List)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line"><span class="keyword">if</span> List[i] &gt; List[j]:</span><br><span class="line">List[j], List[i] = List[i], List[j]</span><br><span class="line"><span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(bubble_sort(L))</span><br></pre></td></tr></table></figure><p>3.快速排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(List,low,high)</span>:</span></span><br><span class="line">    i=low</span><br><span class="line">    j=high</span><br><span class="line">    <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">        <span class="keyword">return</span> List</span><br><span class="line">    key=List[i]</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line"><span class="comment"># 当高位游标大于基准值时, 高位游标向左移动</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> List[j]&gt;=key:</span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        List[i]=List[j]</span><br><span class="line"><span class="comment"># 当低位游标指向的值,小于基准值时, 低位游标向右移动</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> List[i]&lt;=key:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        List[j]=List[i]</span><br><span class="line">    List[i]=key</span><br><span class="line">    quick_sort(List,low,i<span class="number">-1</span>) <span class="comment"># 对基准值左边的未排序队列排序</span></span><br><span class="line">    quick_sort(List,j+<span class="number">1</span>,high)<span class="comment"># 对基准值右边的未排序队列排序</span></span><br><span class="line">    <span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(quick_sort(L, <span class="number">0</span>, len(L)<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><p>4.选择排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def select_sort(List):</span><br><span class="line">    length = len(List)</span><br><span class="line">    for i in range(length):   # 得出全部的索引</span><br><span class="line">        min_index=i           # 假设最小的索引</span><br><span class="line">        for j in range(i,length):      # 获取i之后的索引</span><br><span class="line">            if List[j]&lt;List[min_index]:# 比较i 之后的元素与最小元素的大小</span><br><span class="line">                min_index=j            # 如果小于最小元素,那么久交换索引</span><br><span class="line">        List[i],List[min_index]=List[min_index],List[i]  # 交换最小的索引指向的值</span><br><span class="line">    return List</span><br><span class="line"></span><br><span class="line">print(select_sort(L))</span><br></pre></td></tr></table></figure><p>5.归并排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(list)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    <span class="comment"># 根据长度确定中间位置</span></span><br><span class="line">    mid = int(len(list)/<span class="number">2</span>)</span><br><span class="line">    left=merge_sort(list[:mid])</span><br><span class="line">    right=merge_sort(list[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list1,list2)</span>:</span></span><br><span class="line">    list=[]</span><br><span class="line">    i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(list1) <span class="keyword">and</span> j&lt;len(list2):</span><br><span class="line">        <span class="keyword">if</span> list1[i]&lt;list2[j]:</span><br><span class="line">            list.append(list1[i])</span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> list1[i]&gt;=list2[j]:</span><br><span class="line">            list.append(list2[j])</span><br><span class="line">            j=j+<span class="number">1</span></span><br><span class="line">    list.extend(list1[i:])</span><br><span class="line">    list.extend(list2[j:])</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">print(merge_sort(L))</span><br></pre></td></tr></table></figure><p>6.堆排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(List, i, size)</span>:</span></span><br><span class="line">lchild = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">rchild = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">m = i</span><br><span class="line"><span class="keyword">if</span> i &lt; int(size/<span class="number">2</span>) <span class="keyword">and</span> List[lchild] &gt; List[m]:</span><br><span class="line">m = lchild</span><br><span class="line"><span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> List[rchild] &gt; List[m]:</span><br><span class="line">m = rchild</span><br><span class="line"><span class="keyword">if</span> m != i:</span><br><span class="line">List[m], List[i] = List[i], List[m]</span><br><span class="line">adjust_heap(List, m, size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(List, size)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, int(size/<span class="number">2</span>))[::<span class="number">-1</span>]:</span><br><span class="line">adjust_heap(List, i, size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(List)</span>:</span></span><br><span class="line">size = len(List)</span><br><span class="line">build_heap(List, size)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</span><br><span class="line">List[<span class="number">0</span>], List[i] = List[i], List[<span class="number">0</span>]</span><br><span class="line">adjust_heap(List, <span class="number">0</span>, i)</span><br><span class="line"><span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(heap_sort(L))</span><br></pre></td></tr></table></figure><p>7.基数排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(List, radix=<span class="number">10</span>)</span>:</span></span><br><span class="line">n = int(math.ceil(math.log(max(List), radix)))</span><br><span class="line">bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> List:</span><br><span class="line">bucket[int(j/(radix**(i<span class="number">-1</span>))) % (radix**i)].append(j)</span><br><span class="line"><span class="keyword">del</span> List[:]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> bucket:</span><br><span class="line">List += x</span><br><span class="line"><span class="keyword">del</span> x[:]</span><br><span class="line"><span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(radix_sort(L))</span><br></pre></td></tr></table></figure><p>8.希尔排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(List)</span>:</span></span><br><span class="line">    step = int(len(List)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(step, int(len(List))):</span><br><span class="line">            <span class="keyword">while</span> i &gt;= step <span class="keyword">and</span> List[i-step] &gt; List[i]:</span><br><span class="line">                List[i], List[i-step] = List[i-step], List[i]</span><br><span class="line">                i -= step</span><br><span class="line">        step = int(step/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(shell_sort(L))</span><br></pre></td></tr></table></figure><p>参考： <a href="https://www.cnblogs.com/wangbin2188/p/6520560.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangbin2188/p/6520560.html</a></p><p>运行环境： python3.7.0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;L = [2,6,4,7,9,1,3,5,8]&lt;/p&gt;
&lt;p&gt;1.插入排序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert_sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	n = len(List)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n):            &lt;span class=&quot;comment&quot;&gt;# 得到索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j = i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;                     &lt;span class=&quot;comment&quot;&gt;# 获取当前元素之前的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp = List[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:               &lt;span class=&quot;comment&quot;&gt;# 当索引大于等于时开始循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; temp &amp;lt; List[j]:      &lt;span class=&quot;comment&quot;&gt;# 当List[i]元素小于之前的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				List[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = List[j] &lt;span class=&quot;comment&quot;&gt;# 交换两个元素的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				List[j] = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;comment&quot;&gt;# 继续比较交换后的list[i]和再前一个元素的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; List&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(insert_sort(L))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://github.com/fireblackman.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一份全栈面试题</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/13/web-questtion-2019-03-13/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/13/web-questtion-2019-03-13/</id>
    <published>2019-03-13T08:27:42.000Z</published>
    <updated>2019-03-14T01:19:04.412Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>有列表: L1 = [2, 4, 6, 7, 5, 9, 1, 3, 8]   </p><p>实现输出: L2 = [9, 8, 7, 6, 5, 4, 3 ,2 1]  时少使用三种方法实现?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">L1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">#方法一: 列表的sort()方法</span></span><br><span class="line">L1.sort()</span><br><span class="line">L1.reverse()</span><br><span class="line">print(L1)</span><br><span class="line"><span class="comment">#方法二: 内置函数sorted()</span></span><br><span class="line">print(sorted(L1, reverse=<span class="keyword">True</span>))</span><br><span class="line"><span class="comment">#方法三: 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(L)):</span><br><span class="line">            <span class="keyword">if</span> L[i] &lt; L[j]:</span><br><span class="line">                L[i], L[j] = L[j], L[i]</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line">print(bubble_sort(L1))</span><br><span class="line"><span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>输入:  “aaabaac” , “aa”</p><p>输出:  0, 1, 4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'aaabaac'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">    <span class="keyword">if</span> s1[i:i+<span class="number">2</span>] == <span class="string">'aa'</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><!--more--></li><li><p>c1 = [‘b’,’c’,’b’,’e’,’a’]</p><p>c2 = [‘d’,’a’,’f’,’f’,’c’]</p><p>输出: c3 = [‘a’, ‘b’,’c’,’d’,’e’,’f’]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>,<span class="string">'a'</span>]</span><br><span class="line">c2 = [<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'f'</span>,<span class="string">'f'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="comment"># 方法一, 使用set集合属性</span></span><br><span class="line">print(sorted(list(set(c1 + c2))))</span><br></pre></td></tr></table></figure></li><li><p>找出最长的回文数, 编程语言不限? </p><p>输入: “abccb”</p><p>输出: “bccb”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"abccbc"</span></span><br><span class="line"><span class="comment"># 方法一 遍历所有组合</span></span><br><span class="line">L = []</span><br><span class="line">L1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(s1)+<span class="number">1</span>):</span><br><span class="line">        L.append(s1[i:j])</span><br><span class="line"><span class="comment"># 请求长度大于等于2, 且长度为偶数的回文数        </span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">if</span> len(e) &gt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> len(e)%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s1 = e[:int(len(e)/<span class="number">2</span>)]</span><br><span class="line">            s2 = e[<span class="number">-1</span>:int(len(e)/<span class="number">2</span>)<span class="number">-1</span>:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> s1 == s2:</span><br><span class="line">                print(e)</span><br><span class="line">                L1.append(e)</span><br><span class="line"><span class="comment"># 求出长度大于2且为奇数的长度的回文数                </span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">if</span> len(e) &gt;= <span class="number">2</span>:               </span><br><span class="line">        <span class="keyword">if</span> len(e)%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            s1 = e[:int(len(e)/<span class="number">2</span>)]</span><br><span class="line">            s2 = e[<span class="number">-1</span>:int(len(e)/<span class="number">2</span>):<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> s1 == s2:</span><br><span class="line">                print(e)</span><br><span class="line">                L1.append(e)</span><br><span class="line"></span><br><span class="line"> print(L1)</span><br></pre></td></tr></table></figure></li><li><p>找出最长的没有重复的最长子字符串, 编程实现, 语言不限?</p><p>输入: “aabkcdeeccf”</p><p>输入: “abkcde”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"aabkcdeeccf"</span></span><br><span class="line"><span class="comment"># 取出有相邻元素的索引</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">    <span class="keyword">if</span> s1.count(s1[i]) &gt;= <span class="number">2</span>:</span><br><span class="line">        L.append(i)</span><br><span class="line"></span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure></li><li><p>楼梯共有15层, 每次可以爬1步或者2步, 编程打印,一共可以有多少种方法爬到楼顶,编程实现,语言不限?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cnt = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> x +y == <span class="number">15</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure></li><li><p>求出一个数组中连续的子数组(至少包含一个数字), 而该数组拥有最大的和.</p><p>例: 数组: [-3,1,-3,4,-1,2,1,-5,4], 则最大的连续子数组的为[4, -1, 2, 1], 和为6.</p><p>编程实现, 语言不限.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">-3</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(i+<span class="number">1</span>, len(L)):</span><br><span class="line">        res.append(L[i]+L[y])</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure></li><li><p>网络基础知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 画出TCP建立一次连接过程, 和拆除连接的过程</span><br><span class="line">   答案： 三次握手， 四次挥手</span><br><span class="line"><span class="number">2.</span> 说明TCP, IP, UDP, ARP的功能, 实现原理, 适用场景</span><br><span class="line">   答案： TCP/IP 是OSI参考模型转化过来的，描述了开放式的通信系统的各个层次，有链路层， 网络层， 运输层， 应用层。</span><br><span class="line">    TCP， UDP 是应用层协议， 主要用于数据传输，TCP相对复杂，但是安全，适合传输文件，图片等</span><br><span class="line">         UDP 相对简单，适用于直播，群聊等场景</span><br><span class="line">        ARP， 属于数据链路层协议， 主要用于映射IP地址到MAC地址， 来实现数据的传输。</span><br><span class="line">    参考： https://www.cnblogs.com/gdayq/p/<span class="number">5797645.</span>html    </span><br><span class="line"><span class="number">3.</span> 请简述如何化解DDOS攻击</span><br><span class="line">答案： <span class="number">1.</span> 采用硬件防火墙</span><br><span class="line">          <span class="number">2.</span> 保证足够的带宽</span><br><span class="line">          <span class="number">3.</span> 切换服务器主机地址。</span><br><span class="line">          <span class="number">4.</span> 网页尽量做成静态。</span><br><span class="line">    参考： https://blog.csdn.net/qq_42729180/article/details/<span class="number">81273768</span>    </span><br><span class="line">          </span><br><span class="line"><span class="number">4.</span> 请简述如何解决ARP劫持</span><br><span class="line">    <span class="number">1.</span> ARP双向绑定</span><br><span class="line">    <span class="number">2.</span> 建立DHCP服务器</span><br><span class="line">    <span class="number">3.</span> 划分安全区域</span><br><span class="line">    参考： https://www.cnblogs.com/manue1/p/<span class="number">4462327.</span>html</span><br></pre></td></tr></table></figure></li><li><p>面向对象基本知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 解释面向对象下列概念的含义, 功能和适用场景, 如: 继承, 类, 对象, 重载, 覆盖, 接口, 多态</span><br><span class="line">    答案： 继承： 允许创建分等级层次的类。 继承就是子类继承父类的特征和行为，使得子类对象（实例）具有  父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为</span><br><span class="line">    实现类的扩展和方法的继承，让代码易于维护。 多适用于类的继承。</span><br><span class="line">          类  ： 类其实就是实体的抽象化， 主要是为了将现实生活中的实体抽象成代码， 这样可以方便的创 建和维护。</span><br><span class="line">          对象 ：对象是一个抽象的概念，python中一切皆对象， 主要是为了让变成更加简单，不关注内部实  现，让代码易于维护。</span><br><span class="line">          重载 ：重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可 以不同。每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span><br><span class="line">最常用的地方就是构造器的重载。</span><br><span class="line">          覆盖 ： 在继承过程中， 如果子类的方法名和父类的方法名一致，那么就会覆盖父类的方法。主要是为 了重父类的方法来满足实际的需求</span><br><span class="line">          接口 ： 接口是将功能封装好， 直接给别人调用的， 而不需要关注内部的细节实现。</span><br><span class="line">          多态 ： 多态是指在实际执行时，才知道结果的现象。 可以使程序有良好的扩展，并可以对所有类的对 象进行通用处理  </span><br><span class="line">        参考： https://www.cnblogs.com/jeknight/p/<span class="number">6941088.</span>html</span><br><span class="line">            </span><br><span class="line"><span class="number">2.</span> 请简述两种JVM的实现原理以及优缺点</span><br><span class="line">    答案: 不太了解 </span><br><span class="line">    参考:https://blog.csdn.net/king13127/article/details/<span class="number">70568638</span>    </span><br><span class="line"><span class="number">3.</span> 说明JAVA的错误处理机制</span><br><span class="line">    答案: <span class="number">1</span>）捕获异常：在Java程序运行过程中系统得到一个异常对象，它将会沿着方法的调用栈逐层回溯，寻           找处理这一异常的代码。找到能够处理这种类型异常的方法后，运行时系统把当前异常交给这个方法处           理；如果找不到可以捕获异常的方法，则运行时系统将终止，相应的Java程序也将退出。</span><br><span class="line">         <span class="number">2</span>）声明抛弃异常：当Java程序运行时系统得到一个异常对象时，如果一个方法并不知道如何处理所出现          的异常，则可在方法声明时，声明抛弃异常。声明抛弃异常是在一个方法声明中的throws子句中指明            的。</span><br><span class="line">    参考:https://www.cnblogs.com/yibao/p/<span class="number">6103079.</span>html</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;有列表: L1 = [2, 4, 6, 7, 5, 9, 1, 3, 8]   &lt;/p&gt;
&lt;p&gt;实现输出: L2 = [9, 8, 7, 6, 5, 4, 3 ,2 1]  时少使用三种方法实现?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L1 = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#方法一: 列表的sort()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L1.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L1.reverse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(L1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#方法二: 内置函数sorted()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(sorted(L1, reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#方法三: 冒泡排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bubble_sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(L)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(L)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, len(L)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; L[i] &amp;lt; L[j]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                L[i], L[j] = L[j], L[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(bubble_sort(L1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [9, 8, 7, 6, 5, 4, 3, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://github.com/fireblackman.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>一份爬虫面试题</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/13/spider-questtion-2019-03-13/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/13/spider-questtion-2019-03-13/</id>
    <published>2019-03-13T02:27:42.000Z</published>
    <updated>2019-03-13T03:48:08.252Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>请用一段python代码,实现删除一个列表中的重复元素, 至少两种方法?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">答案: 方法一 : 采用集合set特性</span><br><span class="line">     方法二 : 可以使用多个列表进行判空操作</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>下面Python代码的打印内容是?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print([f() <span class="keyword">for</span> f <span class="keyword">in</span> [<span class="keyword">lambda</span> :x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]])</span><br><span class="line"></span><br><span class="line">答案: [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>下面Python代码的打印内容是?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = [[]*<span class="number">4</span>]*<span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i,l <span class="keyword">in</span> enumerate(b):</span><br><span class="line">    l.append(i)</span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">答案: [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure></li><li><p>下面Python代码的打印内容是?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_to</span><span class="params">(element, to=[])</span>:</span></span><br><span class="line">    to.append(element)</span><br><span class="line">    <span class="keyword">return</span> to </span><br><span class="line"></span><br><span class="line">L1 = append_to(<span class="number">10</span>)</span><br><span class="line">print(L1)</span><br><span class="line">L2 = append_to(<span class="number">20</span>)</span><br><span class="line">print(L2)</span><br><span class="line"></span><br><span class="line">答案: L1 : [<span class="number">10</span>],  L2: [<span class="number">10</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure></li><li><p>下面字符串的含义及使用场景?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u&apos;&apos; </span><br><span class="line">f&apos;&apos;</span><br><span class="line">r&apos;&apos;</span><br><span class="line">u&apos;&apos;</span><br><span class="line">答案: 这里参考:https://blog.csdn.net/gymaisyl/article/details/85109627</span><br></pre></td></tr></table></figure></li><li><p>with关键字的好处, 并简述其原理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好处: 用<span class="keyword">with</span>进行处理, 可以自动回收系统资源, 如文件打开, 可以自动关闭文件等</span><br><span class="line">原理: <span class="keyword">with</span>采用的是上下文管理器, 内部采用了__enter__和 __exit__方法, 当使用<span class="keyword">with</span>进行文件打开时, 会  首先调用__enter__方法, 在退出时会调用__exit__方法, 并进行系统资源的回收, 不需要额外的进行操 作. 功能和<span class="keyword">except</span> ... <span class="keyword">finally</span> ... 有些类似.</span><br></pre></td></tr></table></figure></li><li><p>写一下西湖区电话号码的校验正则: 0571-xxxxxxxx?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'0571-\d+&#123;8&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>遇到过的反爬虫策略和解决办法,请简述一下?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里参考: https://www.cnblogs.com/micro-chen/p/<span class="number">8676312.</span>html</span><br></pre></td></tr></table></figure></li><li><p>列举爬虫用到的网络数据包, 解析包?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是问python库? 还是网络抓包?</span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>设计一个基于session的登录验证的爬虫解决方案?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里参考:https://www.cnblogs.com/wj12312/p/<span class="number">10108650.</span>html</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;请用一段python代码,实现删除一个列表中的重复元素, 至少两种方法?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;答案: 方法一 : 采用集合set特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     方法二 : 可以使用多个列表进行判空操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;下面Python代码的打印内容是?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print([f() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; :x &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;答案: [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spider" scheme="https://github.com/fireblackman.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>rest-framework view</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/01/django-rest-framework-view-2019-03-01/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/01/django-rest-framework-view-2019-03-01/</id>
    <published>2019-03-01T12:27:42.000Z</published>
    <updated>2019-03-06T14:02:38.245Z</updated>
    
    <content type="html"><![CDATA[<p>1 django-rest-framework中的view视图总结.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 django-rest-framework中的view视图总结.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/fireblackman.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>TheRoad Not Taken</title>
    <link href="https://github.com/fireblackman.github.io/2019/03/01/poetry-2019-03-01/"/>
    <id>https://github.com/fireblackman.github.io/2019/03/01/poetry-2019-03-01/</id>
    <published>2019-03-01T00:56:17.000Z</published>
    <updated>2019-03-01T06:51:15.118Z</updated>
    
    <content type="html"><![CDATA[<p>TheRoad Not Taken</p><p>-Robert Frost</p><p>Two roads diverged in a yellow wood,</p><p>And sorry I could not travel both</p><p>And be one traveler, long I stood</p><a id="more"></a><p>And looked down one as far as I could</p><p>To where it bent in the undergrowth;</p><p>Then took the other, as just as fair,</p><p>And having perhaps the better claim,</p><p>Because it was grassy and wanted wear;</p><p>Thoug has for that the passing there</p><p>Had worn them really about the same,</p><p>And both that morning equally lay</p><p>In leaves no step had trodden black.</p><p>Oh,I kept the first for another day!</p><p>Yet knowing how way leads on to way,</p><p>I doubted if I should ever come back.</p><p>I shall be telling this with a sigh</p><p>Somewhere ages and ages hence:</p><p>Two roads diverged in a wood,and I��</p><p>I took the one less traveled by,</p><p>And that has made all the difference.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TheRoad Not Taken&lt;/p&gt;
&lt;p&gt;-Robert Frost&lt;/p&gt;
&lt;p&gt;Two roads diverged in a yellow wood,&lt;/p&gt;
&lt;p&gt;And sorry I could not travel both&lt;/p&gt;
&lt;p&gt;And be one traveler, long I stood&lt;/p&gt;
    
    </summary>
    
    
      <category term="poetry" scheme="https://github.com/fireblackman.github.io/tags/poetry/"/>
    
  </entry>
  
  <entry>
    <title>如何独立使用Django的models</title>
    <link href="https://github.com/fireblackman.github.io/2019/02/28/django-models/"/>
    <id>https://github.com/fireblackman.github.io/2019/02/28/django-models/</id>
    <published>2019-02-28T02:00:03.000Z</published>
    <updated>2019-02-28T02:15:06.947Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line"></span><br><span class="line">sys.path.append(pwd+<span class="string">"../"</span>)</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"项目名称.settings"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> model类</span><br><span class="line"></span><br><span class="line">model类.objects.all()</span><br><span class="line">user = model()</span><br><span class="line">user.username = <span class="string">'zhangsir'</span></span><br><span class="line">user.password = <span class="string">'123456'</span></span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Django" scheme="https://github.com/fireblackman.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>python-basic</title>
    <link href="https://github.com/fireblackman.github.io/2019/02/11/python-Basic/"/>
    <id>https://github.com/fireblackman.github.io/2019/02/11/python-Basic/</id>
    <published>2019-02-11T14:27:42.000Z</published>
    <updated>2019-02-27T08:45:54.519Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在终端输出图形:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"   *       "</span>)</span><br><span class="line">print(<span class="string">"  ***      "</span>)</span><br><span class="line">print(<span class="string">" *****     "</span>)</span><br><span class="line">print(<span class="string">"*******    "</span>)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>中国古代的秤是16两一斤,请问古代的216两是古代的几斤几两?写程序打印出来?</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jin = <span class="number">216</span>//<span class="number">16</span></span><br><span class="line">liang = <span class="number">216</span> % <span class="number">16</span> </span><br><span class="line">print(<span class="string">"古代的216两是古代的%s斤%s两"</span> % (jin, liang))</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>从凌晨0:0:0 计时，到现在已经过了63320秒,请问，现在是几时，几分，几秒,写程序打印出来<br>  (提示: 可以用地板除和求余实现)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hour = <span class="number">63320</span> // <span class="number">3600</span></span><br><span class="line">second = <span class="number">63320</span> % <span class="number">60</span></span><br><span class="line">minute = <span class="number">63320</span> // <span class="number">60</span> % <span class="number">60</span></span><br><span class="line">print(<span class="string">"63320距离0:0:0过去了%s时%s分%s秒"</span> % (hour, minute, second))</span><br></pre></td></tr></table></figure></li><li><p>温度转换</p><p>  摄氏湿度 = 5.0 / 9.0*(华氏温度-32)<br>  开氏温度 = 摄氏温度 + 273.15<br>  请问:</p><pre><code>100华氏温度转为摄氏温度是多少度?转为开氏温度是多少度?</code></pre>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">she = <span class="number">5.0</span>/<span class="number">9.0</span>*(<span class="number">100</span> - <span class="number">32</span>)</span><br><span class="line">kai = she + <span class="number">273.15</span></span><br><span class="line">print(<span class="string">"开氏温度为"</span>, kai)</span><br></pre></td></tr></table></figure></li></ol><p>5.北京出租车计价器</p><pre><code>收费标准:  3公里以内收费 13 元  基本单价 2.3元/公里(超出3公里以外)  空驶费: 超过15公里后,每公里加收单价的%50空驶费(即3.45元/公里)要求:  输入公里数,打印出费用金额(以元为单位四舍五入)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mile = float(input(<span class="string">"请输入您要查询的公里数:"</span>))</span><br><span class="line">money = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> mile &lt;=<span class="number">3</span>:</span><br><span class="line">    money = <span class="number">13</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">3</span>&lt;= mile &lt;= <span class="number">15</span>:</span><br><span class="line">    money = <span class="number">13</span> + (mile - <span class="number">3</span>) * <span class="number">2.3</span></span><br><span class="line"><span class="keyword">elif</span> mile &gt; <span class="number">15</span>:</span><br><span class="line">    money = <span class="number">13</span> + (mile - <span class="number">15</span>) * <span class="number">3.45</span> + (<span class="number">15</span> - <span class="number">3</span>) * <span class="number">2.3</span></span><br><span class="line">print(<span class="string">"您的乘车费用为"</span>, money)</span><br></pre></td></tr></table></figure><p>6.输入一个学生的三科成绩:</p><pre><code>打印出最高分是多少?打印出最低分是多少?打印出平均分是多少?</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设是语文,数学, 英语</span></span><br><span class="line">chinese = float(input(<span class="string">"请输入您的语文成绩:"</span>))</span><br><span class="line">math = float(input(<span class="string">"请输入您的数学成绩:"</span>))</span><br><span class="line">english = float(input(<span class="string">"请输入您的英语成绩:"</span>))</span><br><span class="line"><span class="keyword">if</span> chinese &gt; math:</span><br><span class="line">    <span class="keyword">if</span> math &gt; english:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,Chinese, <span class="string">"最低分是"</span>, english)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,Chinese, <span class="string">"最低分是"</span>, math)</span><br><span class="line"><span class="keyword">elif</span> math &gt; chinese:</span><br><span class="line">    <span class="keyword">if</span> chinese &gt; english:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,math, <span class="string">"最低分是"</span>, english)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,math, <span class="string">"最低分是"</span>, chinese)</span><br><span class="line"><span class="keyword">elif</span> english &gt; math:</span><br><span class="line">    <span class="keyword">if</span> math &gt; chinese:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,english, <span class="string">"最低分是"</span>, chinese)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"最高分是"</span>,english, <span class="string">"最低分是"</span>, math)</span><br></pre></td></tr></table></figure><p>7.给出一个年份,判断是否为闰年并打印结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">规则:  每四年一闰,每百年不闰,四百年又闰</span><br><span class="line">  <span class="number">2016</span> 闰年</span><br><span class="line">  <span class="number">2100</span> 不是闰年</span><br><span class="line">  <span class="number">2400</span> 是闰年​</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">"请输入一个年份"</span>))</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">or</span> (year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">4</span> == <span class="number">0</span>):</span><br><span class="line">    print(year, <span class="string">"是闰年"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不是闰年"</span>)</span><br></pre></td></tr></table></figure><p>8.BMI(Body Mass Index) 指数,又称身体质量指数</p><pre><code>BMI公式:  BMI = 体重(公斤) / 身高的平方(米)标准表:  BMI &lt; 18.5       体重过轻  18.5 &lt;= BMI &lt; 24 正常范围   BMI &gt;= 24         体重过重(超标)输入身高和体重,打印BMI值,并打印体重状况</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">weight = float(input(<span class="string">"请输入您的体重(公斤):"</span>))</span><br><span class="line">height = float(input(<span class="string">"请输入您的身高(米):"</span>))</span><br><span class="line">bmi = weight / height ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18.5</span>:</span><br><span class="line">print(<span class="string">"体重过轻"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">18.5</span> &lt;= bmi &lt; <span class="number">24</span>:</span><br><span class="line">print(<span class="string">"正常范围"</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &gt;= <span class="number">24</span>:</span><br><span class="line">print(<span class="string">"体重过重(超标)"</span>)</span><br></pre></td></tr></table></figure><p>7.输入一个字符串,把输入的字符串中的空格全部去掉(包括字符串中间的空格)</p><pre><code>1) 打印原字符串及长度2) 打印处理后的字符串及长度</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = input(<span class="string">"请随机输入一个字符串"</span>)</span><br><span class="line">print(<span class="string">"您输入的字符串是"</span>,str1, 长度是, len(str1))</span><br><span class="line">str2 = str1.replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br><span class="line">print(<span class="string">"处理后的字符串是"</span>,str2, 长度是, len(str2))</span><br></pre></td></tr></table></figure><p>10.写程序,输入三行文字,让这三行文字在一个方框内居中显示</p><pre><code>如:  请输入: hello!  请输入: I&apos;m studing python!  请输入: I like python!打印如下:  +---------------------+  |        hello!       |  | I&apos;m studing python! |  |    I like python!   |  +---------------------+注:  不要输入中文</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str1 = input(<span class="string">"请输入第一段代码:"</span>)</span><br><span class="line">str2 = input(<span class="string">"请输入第二段代码:"</span>)</span><br><span class="line">str3 = input(<span class="string">"请输入第三段代码:"</span>)</span><br><span class="line">l1 = len(str1)</span><br><span class="line">l2 = len(str2)</span><br><span class="line">l3 = len(str3)</span><br><span class="line">l4 = max([l1,l2,l3])</span><br><span class="line">print(<span class="string">"+"</span>+<span class="string">"-"</span>*l4+<span class="string">"+"</span>)</span><br><span class="line">print(<span class="string">"|"</span>+ str1.center(l4)+<span class="string">"|"</span>)</span><br><span class="line">print(<span class="string">"|"</span>+ str2.center(l4)+<span class="string">"|"</span>)</span><br><span class="line">print(<span class="string">"|"</span>+ str3.center(l4)+<span class="string">"|"</span>)</span><br><span class="line">print(<span class="string">"+"</span>+<span class="string">"-"</span>*l4+<span class="string">"+"</span>)</span><br></pre></td></tr></table></figure><p>11.打印从零开始的浮点数,每个数增加0.5,打印出10以内这样的数<br>0.0  0.5  1.0  1.5  ….. 9.0  9.5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = 0.0</span><br><span class="line">while True:</span><br><span class="line">print(start)</span><br><span class="line">start += 0.5</span><br><span class="line">if start &gt;9.5:</span><br><span class="line">break</span><br></pre></td></tr></table></figure><p>12.写程序求:<br>1/1 + 1/3 + 1/5 + 1/7 + ….. + 1/99的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">s += <span class="number">1</span>/(<span class="number">2</span>*i<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>13.输入一个整数表示三角形的宽度和高度,打印出如下的三角形:</p><pre><code>如:  请输入三解形的宽度: 4打印如下:  *  **  ***  ****</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(&quot;请输入一个数字:&quot;))</span><br><span class="line">i = 1</span><br><span class="line">while i &lt;= num:</span><br><span class="line">print(i*&quot;*&quot;)</span><br><span class="line">i += 1</span><br></pre></td></tr></table></figure><p>14.写程序,输入一个整数代表正方形的宽和高,打印如下的正方形:</p><pre><code>如:  请输入宽度: 5打印正方形如下:  1 2 3 4 5  2 3 4 5 6  3 4 5 6 7  4 5 6 7 8  5 6 7 8 9如:  请输入宽度: 4打印正方形如下:  1 2 3 4  2 3 4 5  3 4 5 6  4 5 6 7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"请输入一个数字:"</span>))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= num:</span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span> j &lt; num+i:</span><br><span class="line">        print(j, end=<span class="string">" "</span>)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>15.写程序输入一个三角形的宽和高,打印相应的三角形:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如:</span><br><span class="line">  输入: <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) </span><br><span class="line">  *</span><br><span class="line">  **</span><br><span class="line">  ***</span><br><span class="line"><span class="number">2</span>)</span><br><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"><span class="number">3</span>)</span><br><span class="line">  ***</span><br><span class="line">  **</span><br><span class="line">  *</span><br><span class="line"><span class="number">4</span>)</span><br><span class="line">  ***</span><br><span class="line">   **</span><br><span class="line">    *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"请输入三角形的宽:"</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">print(row*<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(num, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">print(row*<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">print(<span class="string">" "</span>*(num-row)+ row*<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(num, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">print(<span class="string">" "</span>*(num-row) + row*<span class="string">"*"</span>)</span><br></pre></td></tr></table></figure><p>16.写一个程序,任意输入一个整数,判断这个数是否为素数(prime)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">素数(也叫质数), 只能被<span class="number">1</span>和自身整除的正整数</span><br><span class="line">  如:  <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">11</span> <span class="number">13</span> <span class="number">17</span> ....</span><br><span class="line">   <span class="number">153</span> <span class="number">370</span> ...示:</span><br><span class="line">   <span class="number">153</span> <span class="number">370</span> ...用排除法: 当判断x是否为素数时,只要让x分别除      <span class="number">153</span> <span class="number">370</span> ...以<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5.</span>.. x<span class="number">-1</span>,只要有任何一个数能整数,则说明x不是素数,否则x为素数</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"请输入一个整数:"</span>))</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">"yes"</span>)</span><br><span class="line"><span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"no"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"no"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"yes"</span>)</span><br></pre></td></tr></table></figure><p>17.编写程序求下列多项式的值:<br>      Sn = 1/1 - 1/3 + 1/5 - 1/7 + …..<br>      1) 求1000000个这样的分数相加的和是多少?<br>      2) 将上一步的和乘以4打印出来,是多少?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000001</span>):</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    s += <span class="number">1</span>/(<span class="number">2</span>*i<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">elif</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">s += <span class="number">-1</span>/(<span class="number">2</span>*i<span class="number">-1</span>)</span><br><span class="line">print(s)</span><br><span class="line">print(<span class="number">4</span>*s)</span><br></pre></td></tr></table></figure><p>18.算出 100 ~ 999之间的水仙花数(Narcissistic Number)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">水仙花数是指百位的<span class="number">3</span>次方 + 十位的<span class="number">3</span>次方 + 个位的<span class="number">3</span>次方等于原数的整数</span><br></pre></td></tr></table></figure><p>  如:<br>     153 = 1 <strong>  3  +  5 </strong> 3 + 3 ** 3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">bai = i // <span class="number">10</span> ** <span class="number">2</span></span><br><span class="line">shi = i //<span class="number">10</span> % <span class="number">10</span></span><br><span class="line">ge = i % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> bai**<span class="number">3</span> + shi**<span class="number">3</span> + ge**<span class="number">3</span> == i:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>19.有一些数存于列表中.如:</p><pre><code>L = [1, 3, 2, 1, 6, 4, 2, .... 98,82]1) 将列表L中出现的数字存入到另一个列表L2中　　要求:      重复出现多次的数字只在L2中保留一份(去重)2) 将列表中出现两次的数字存于列表L3中，在L3中只保留一份</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">98</span>, <span class="number">82</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">L1 = []</span><br><span class="line">L2 = []</span><br><span class="line">L3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> L1:</span><br><span class="line">L1.append(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> L1:</span><br><span class="line"><span class="keyword">if</span> L.count(j) == <span class="number">2</span>:</span><br><span class="line">L2.append(j)</span><br><span class="line"><span class="keyword">if</span> L.count(j) == <span class="number">3</span>:</span><br><span class="line">L3.append(j)</span><br><span class="line">print(L)</span><br><span class="line">print(L1)</span><br><span class="line">print(L2)</span><br><span class="line">print(L3)</span><br></pre></td></tr></table></figure><p>20.计算出100以内的全部素数，将这些素数存于列表中，然后打印出列表中的这些素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L.append(i)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>21.生成前40 个斐波那契(Fibonacci)数列中的数</p><pre><code>1  1  2  3  5  8  13  21 要求: 将这些数保存于列表中．打印这些数</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">a,b = L</span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">39</span>:</span><br><span class="line">L.append(a + b)</span><br><span class="line">a = L[i<span class="number">-1</span>]</span><br><span class="line">b = L[i]</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>22.已知有两个等长的列表<br>list1 = [1001, 1002, 1003, 1004]<br>list2 = [“Tom”, “Jerry”, “Spike”, “Tyke”]<br>    写程序生成如下字典:<br> {“Tom”: 1001, “Jerry”:1002, “Spike”:1003, “Tyke”: 1004}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>]</span><br><span class="line">list2 = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Spike"</span>, <span class="string">"Tyke"</span>]</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    d[list2[i]] = list1[i]</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>23.任意输入多个学生的姓名,年龄,成绩,每个学生信息存入一个字典中,然后再放入列表中(每个学生信息需要手动输入)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如:</span><br><span class="line">  请输入姓名: name1</span><br><span class="line">  请输入年龄: <span class="number">15</span></span><br><span class="line">  请输入成绩: <span class="number">99</span></span><br><span class="line">  请输入姓名: name2</span><br><span class="line">  请输入年龄: <span class="number">22</span></span><br><span class="line">  请输入成绩: <span class="number">100</span></span><br><span class="line">  请输入姓名: &lt;直接回车结束输入&gt;</span><br></pre></td></tr></table></figure><p>   在程序内部生成如下列表:<br>   L = [{‘name’: name1, ‘age’:15, ‘score’: 99}, {‘name’: name2, ‘age’:22, ‘score’: 100}]<br>   1) 打印出上述列表<br>   2) 以下列表格的形式打印出上述信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------+----------+</span><br><span class="line">|     name      |    age    |  score   |</span><br><span class="line">+---------------+-----------+----------+</span><br><span class="line">|    name1      |    <span class="number">15</span>     |    <span class="number">99</span>    |</span><br><span class="line">|     name2     |    <span class="number">22</span>     |   <span class="number">100</span>    |</span><br><span class="line">+---------------+-----------+----------+</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">d = &#123;&#125;</span><br><span class="line">name = input(<span class="string">"请输入您的姓名:"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    age = input(<span class="string">"请输入您的年龄:"</span>)</span><br><span class="line">    score = input(<span class="string">"请输入您的分数:"</span>)</span><br><span class="line">    d[<span class="string">'name'</span>] = name</span><br><span class="line">    d[<span class="string">'age'</span>] = age</span><br><span class="line">    d[<span class="string">'score'</span>] = score</span><br><span class="line">    L.append(d)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>24.写一个函数get_chinese_char_count(s) 函数,此函数实现的功能是给定一个字符串,返回这个字符串中中文字符的个数</p><pre><code>def get_chinese_char_count(s):    .... # 此处自己实现s = input(&quot;请输入中英文混合的字符串: &quot;)print(&quot;您输入的中文字符的个数是:&quot;,        get_chinese_char_count(s))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_chinese_char_count</span><span class="params">(s)</span>:</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> chr(i) &gt; <span class="number">127</span>:</span><br><span class="line">c += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">s = input(<span class="string">"请输入中英文混合的字符串:"</span>)</span><br><span class="line">print(<span class="string">"您输入的中文字符的个数是:"</span>, </span><br><span class="line">       get_chinese_char_count(s))</span><br></pre></td></tr></table></figure><p>25.定义两个函数:<br>sum3(a, b, c)  用于返回三个数的和<br>pow3(x)  用于返回x的三次方(立方)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用以上函数计算:</span><br><span class="line">  <span class="number">1</span>) 计算 <span class="number">1</span>的立方+ <span class="number">2</span>的立方 + <span class="number">3</span>的立方</span><br><span class="line">  <span class="number">2</span>) 计算 <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span>的和的立方</span><br><span class="line">  即:<span class="number">1</span>**<span class="number">3</span> + <span class="number">2</span>**<span class="number">3</span>+<span class="number">3</span>**<span class="number">3</span> 和 (<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>)**<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum3</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow3</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1) 计算 1的立方+ 2的立方 + 3的立方</span></span><br><span class="line">s = sum3(pow3(<span class="number">1</span>), pow3(<span class="number">2</span>), pow3(<span class="number">3</span>))</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 计算 1 + 2 + 3的和的立方</span></span><br><span class="line">s = pow3(sum3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>26.写一个函数isprime(x) 判断x是否是素数.如果是素数返回True,否则返回False</p><pre><code>def isprime(x):    ...print(isprime(4)) # Falseprint(isprime(5)) # True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">if</span> x &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, x):</span><br><span class="line"><span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>27.写一个函数prime_m2n(m, n)  返回从m开始,到n结束的范围内的素数(不包含n),返回这些素数的列表,并打印</p><pre><code>如:  L = prime_m2n(5, 10)  print(L)  # [5, 7]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_m2n</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(m, n):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">2</span>, x):</span><br><span class="line">            <span class="keyword">if</span> x % y == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            L.append(x)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">print(prime_m2n(<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>28.写一个函数primes(n)  返回指定范围n以内的素数(不包含n)的全部素数的列表,并打印这些素数<br>L = primes(10)<br>print(L)  # [2, 3, 5, 7]<br>1) 打印100以内的全部素数<br>2) 打印200以内的全部素数的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_n</span><span class="params">(n)</span>:</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">2</span>, x):</span><br><span class="line">            <span class="keyword">if</span> x % y == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            L.append(x)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">print(prime_n(<span class="number">100</span>))</span><br><span class="line">print(sum(prime_n(<span class="number">200</span>)))</span><br></pre></td></tr></table></figure><p>29.改写之前的学生信息管理程序:<br>改为用两个函数实现<br>  1)写函数input_student() 来获取学生信息,当输入姓名为空时结束输入.形成字典组成的列表并返回<br>  2) 写函数print_student(L) 将上述函数得到的打印成为表格显示</p><pre><code>如:  def input_student():      ...  def print_student(L):      ...   L = input_student()  # 获取列表  print(L)  print_student(L)  # 打印表格</code></pre><p>30.看懂下面的程序在做什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fx</span><span class="params">(f, x, y)</span>:</span></span><br><span class="line">    print(f(x, y))</span><br><span class="line">fx((<span class="keyword">lambda</span> a, b: a + b), <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">fx((<span class="keyword">lambda</span> a, b: a**b), <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>31.给出一个整数n,写一个函数来计算</p><pre><code>1 + 2 + 3 + 4 + ... + n 的值并返回结果要求用函数来做如:  def mysum(n):      ...  print(mysum(100))  # 5050  print(mysum(10))  # 55</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysum</span><span class="params">(n)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        s += i</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>32.给出一个整数n,写一个函数来计算n!(n的阶乘))<br>n! = 1 <em> 2 </em> 3 <em> 4</em> … * n<br>def myfac(n):<br>    …<br>print(myfac(5))  # 120</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfac</span><span class="params">(n)</span>:</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">print(myfac(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>33.给出一个整数n,写一个函数来计算<br>1+2 <strong> 2+3 </strong> 3+…+ n**n的和</p><p>(n给一个小点的数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysum</span><span class="params">(n)</span>:</span></span><br><span class="line">    L = [n**n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> sum(L)</span><br><span class="line">print(mysum(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>34.写程序打印杨辉三解(只打印6层)</p><p>35.实现带界面的学生信息管理系统的项目</p><pre><code>+-----------------------+| 1) 添加学生信息         || 2) 显示学生信息         || 3) 删除学生信息         || 4) 修改学生成绩         || q) 退出                |+-----------------------+(要求:用函数来实现,每个功能写一个函数写之相对应)</code></pre><p>36.编写程序求 1 ~ 20的阶乘的和</p><pre><code>即:  1! + 2! + 3! + ... + 20!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfac</span><span class="params">(n)</span>:</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">y = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">y *= j</span><br><span class="line">s += y</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">print(myfac(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>37.改写之前的学生信息管理系统</p><pre><code>要求添加四个功能:  | 5)  按学生成绩高-低显示学生信息 |  | 6)  按学生成绩低-高显示学生信息 |  | 7)  按学生年龄高-低显示学生信息 |  | 8)  按学生年龄低-高显示学生信息 |</code></pre><p>38.已知有列表:</p><pre><code>L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]1) 写个函数print_list(lst)  打印出所有的数字,即:  print_list(L)  # 打印3 5 8 10 13...2) 写一个函数sum_list(lst) 返回这个列表中所有数字的和   print(sum_list(L))  # 106</code></pre><p>  注:<br>    type(x) 可以返回一个变量的类型,如:<br>       &gt;&gt;&gt; type(20) is int  # True<br>       &gt;&gt;&gt; type([1, 2, 3]) is list # True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">L = [[<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="number">10</span>, [[<span class="number">13</span>, <span class="number">14</span>], <span class="number">15</span>, <span class="number">18</span>], <span class="number">20</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> type(e) != list:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_list(e)</span><br><span class="line">print_list(L)</span><br><span class="line"></span><br><span class="line">L = [[<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>], <span class="number">10</span>, [[<span class="number">13</span>, <span class="number">14</span>], <span class="number">15</span>, <span class="number">18</span>], <span class="number">20</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_list</span><span class="params">(lst)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="comment"># 如果x是整数</span></span><br><span class="line">        <span class="keyword">if</span> type(x) <span class="keyword">is</span> int:</span><br><span class="line">            s += x</span><br><span class="line">        <span class="comment"># 如果x是列表,则s+= 列表的所有元素的和</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s += sum_list(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">print(sum_list(L))  <span class="comment"># 106</span></span><br></pre></td></tr></table></figure><p>39.编写函数 fun,其功能是计算下列多项式的和</p><pre><code>f(n) = 1 + 1/1! + 1/2! + 1/3! +    ...... + 1/n!</code></pre><p>  求当n等20时,此函数的值?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial <span class="keyword">as</span> fac</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(n)</span>:</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">s += <span class="number">1</span>/fac(i)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">print(fun(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>40.写一个程序,以电子时钟格式显示时间:<br>格式为:<br>  HH:MM:SS   如: 15:58:26</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock_run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        s = time.ctime()</span><br><span class="line">        t = s.split(<span class="string">" "</span>)[<span class="number">3</span>]</span><br><span class="line">        print(<span class="string">"%s"</span> % t, end=<span class="string">"\r"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">clock_run()</span><br></pre></td></tr></table></figure><p>41.编写一个闹种程序,启动时设置定时时间,到时间后打印一句”时间到!”,然后退出程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alarm</span><span class="params">()</span>:</span></span><br><span class="line">    hour = input(<span class="string">"please input hour:"</span>)</span><br><span class="line">    minute = input(<span class="string">"please input minute:"</span>)</span><br><span class="line">    second = input(<span class="string">"please input second:"</span>)</span><br><span class="line">    print(<span class="string">"您设置的时间是%0s:%0s:%0s"</span> % (hour, minute, second))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 拿到当前时间</span></span><br><span class="line">        t = time.localtime()</span><br><span class="line">        print(<span class="string">"%02s:%02s:%02s"</span> % (t[<span class="number">3</span>:<span class="number">6</span>]), end=<span class="string">"\r"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">alarm()</span><br></pre></td></tr></table></figure><p>42.模拟斗地主发牌,扑克牌54张</p><pre><code>花色:  黑桃(&apos;\u2660&apos;), 梅花(&apos;\u2663&apos;), 红桃(&apos;\u2665&apos;), 方块(&apos;\u2666&apos;)数字:  A2-10JQK  大王,小王三个人,每个人发17张牌,底牌留三张  输入回车,打印第1个人的17张牌  输入回车,打印第2个人的17张牌  输入回车,打印第3个人的17张牌  输入回车,打印3张底牌</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poker_game</span><span class="params">()</span>:</span></span><br><span class="line">    king = [<span class="string">"大王"</span>,<span class="string">"小王"</span>]</span><br><span class="line">    colors = [<span class="string">'\u2660'</span>, <span class="string">'\u2663'</span>, <span class="string">'\u2665'</span>, <span class="string">'\u2666'</span>]</span><br><span class="line">    nums = [<span class="string">'A'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'10'</span>,<span class="string">'J'</span>,<span class="string">'Q'</span>,<span class="string">'K'</span>]</span><br><span class="line">    all_poker = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> colors:</span><br><span class="line">            all_poker.append(num+col)</span><br><span class="line">    all_poker.extend(king)</span><br><span class="line">    random.shuffle(all_poker)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = input(<span class="string">"请按回车进行打印每个人的牌:"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"请重新输入"</span>,e)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">            print(all_poker[<span class="number">0</span>:<span class="number">17</span>])</span><br><span class="line">            print(all_poker[<span class="number">17</span>:<span class="number">34</span>])</span><br><span class="line">            print(all_poker[<span class="number">34</span>:<span class="number">51</span>])</span><br><span class="line">            print(all_poker[<span class="number">51</span>:<span class="number">55</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">poker_game()</span><br></pre></td></tr></table></figure><p>43.修改学生信息管理程序,拆分为模块<br>要求:</p><ol><li>主事件循环放在 main.py中</li><li>show_menu函数放在menu.py中</li><li>与学生操作相关的函数放在student_info.py中</li></ol><p>44.一个球从100米高空落下,每次落地后反弹高度为原高度的一半地,再落下,</p><pre><code>1) 写程序算出皮球在第10次落地后反弹多高2) 打印10次后球出共经过多少米路程</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ball_run</span><span class="params">()</span>:</span></span><br><span class="line">    height = <span class="number">100</span> <span class="comment">#单位米</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        height /= <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> height</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">print(ball_run())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ball_mile</span><span class="params">()</span>:</span></span><br><span class="line">    height = <span class="number">100</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        s += (height /= <span class="number">2</span>)*<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> s+<span class="number">50</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(ball_mile())</span><br></pre></td></tr></table></figure><p>45.分解质因数, 输入一个正整数,分解质因数.<br>如输入 : 90  则打印: 90 = 2 <em> 3 </em> 3 * 5<br>  (质因数是指最小能被原数整除的素数(不包括1))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_fac</span><span class="params">(n)</span>:</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">                L.append(i)</span><br><span class="line">                n /= i</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            L.append(int(n))    </span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line">print(prime_fac(<span class="number">90</span>))</span><br></pre></td></tr></table></figure><p>46.打印 9 x 9 乘法表:</p><pre><code>1x1=11x2=2 2x2=41x3=3 2x3=6 3x3=9......1x9=9 ..............   9x9=81</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_table</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,x+<span class="number">1</span>):</span><br><span class="line">            print(<span class="string">"%2d*%2d=%2d"</span> % (x,y,x*y),end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">multi_table()</span><br></pre></td></tr></table></figure><p>47.写一个生成器函数 myxrange(start, stop, step) 来生成一系列整数<br>要求功能与range完全相同<br>不允许调用range函数和列表</p><pre><code>然后用自己写的myxrange函数求 1 ~ 100内奇数的平方和</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myxrange</span><span class="params">(start, stop=None, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 调用开始和结束的值</span></span><br><span class="line">    <span class="keyword">if</span> stop <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        stop = start</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正向生成:</span></span><br><span class="line">    <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">            <span class="keyword">yield</span> start  <span class="comment"># 生成当前值</span></span><br><span class="line">            start += step</span><br><span class="line">    <span class="keyword">elif</span> step &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> start &gt; stop:</span><br><span class="line">            <span class="keyword">yield</span> start</span><br><span class="line">            start += step  <span class="comment"># 加上一个负数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> myxrange(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)]</span><br><span class="line">print(sum(L))</span><br></pre></td></tr></table></figure><p>48.写一个myfilter生成器函数,功能与filter函数功能完全相同<br>如:<br>   def myfilter(fn, iter1):<br>        …<br>   L = [x for x in myfilter(<br>       lambda x: x%2, range(10)<br>   )]  # L = [1, 3, 5, 7, 9]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfilter</span><span class="params">(fn, iter1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iter1:</span><br><span class="line">        <span class="keyword">if</span> fn(i):</span><br><span class="line">            <span class="keyword">yield</span> i  </span><br><span class="line"></span><br><span class="line">L = [x <span class="keyword">for</span> x <span class="keyword">in</span> myfilter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>, range(<span class="number">10</span>))]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>49.写程序实现复制文件功能:<br>要求:</p><ol><li>源文件路径和目标文件路径需手动输入</li><li>要考虑关闭文件问题</li><li>要考虑复制超大文件问题</li><li>要能复制二进制文件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycopy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>50.修改现在有学生信息管理程序,实现保护学生对象信息的安全,将score,name, age变为除该类方法外的其它函数和方法无法访问(变为私有属性进行封装)</p><p>51.自己写一个MyList为在,实现重写len,str,<br>让MyList类型的对象变为可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, interable)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>52.写一个类,Fibonacci实现迭代器协议,此类的对象可以作为可迭代对象生成相应的斐波那契数</p><pre><code>1 1 2 3 5 8 13 ....如:    class Fibonacci:        def __init__(self, n):            ...        ....实现如下操作:    for x in Fibonacci(5)        print(x)  # 1 1 2 3 5    L = [x for x in Fibonacci(50)]    print(L)    pring(sum(Fibonacci(100)))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在终端输出图形:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;   *       &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;  ***      &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot; *****     &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;*******    &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://github.com/fireblackman.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>爱学习,爱生活</title>
    <link href="https://github.com/fireblackman.github.io/2019/01/11/article/"/>
    <id>https://github.com/fireblackman.github.io/2019/01/11/article/</id>
    <published>2019-01-11T12:27:42.000Z</published>
    <updated>2019-02-27T08:12:58.699Z</updated>
    
    <content type="html"><![CDATA[<p>真理惟一可靠的标准就是永远自相符合。                         —— 欧文</p><p>土地是以它的肥沃和收获而被估价的；才能也是土地，不过它生产的不是粮食，而是真理。如果只能滋生瞑想和幻想的话，即使再大的才能也只是砂地或盐池，那上面连小草也长不出来的。<br>                                                            —— 别林斯基<br><a id="more"></a><br>我需要三件东西：爱情友谊和图书。然而这三者之间何其相通！炽热的爱情可以充实图书的内容，图书又是人们最忠实的朋友。                         —— 蒙田</p><p>时间是一切财富中最宝贵的财富。                             —— 德奥弗拉斯多</p><p>世界上一成不变的东西，只有“任何事物都是在不断变化的”这条真理。<br>                                                            —— 斯里兰卡</p><p>过放荡不羁的生活，容易得像顺水推舟，但是要结识良朋益友，却难如登天。<br>                                                            —— 巴尔扎克</p><p>这世界要是没有爱情，它在我们心中还会有什么意义！这就如一盏没有亮光的走马灯。                                                             —— 歌德</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真理惟一可靠的标准就是永远自相符合。                         —— 欧文&lt;/p&gt;
&lt;p&gt;土地是以它的肥沃和收获而被估价的；才能也是土地，不过它生产的不是粮食，而是真理。如果只能滋生瞑想和幻想的话，即使再大的才能也只是砂地或盐池，那上面连小草也长不出来的。&lt;br&gt;                                                            —— 别林斯基&lt;br&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://github.com/fireblackman.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
